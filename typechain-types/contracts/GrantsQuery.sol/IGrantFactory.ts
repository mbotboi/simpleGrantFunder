/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IGrantFactory {
  export type GrantStructStruct = {
    grantId: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    tokenAddress: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type GrantStructStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    grantId: BigNumber;
    recipient: string;
    tokenAddress: string;
    timestamp: BigNumber;
  };
}

export interface IGrantFactoryInterface extends utils.Interface {
  functions: {
    "getActiveGrants()": FunctionFragment;
    "getGrantInfo(uint256)": FunctionFragment;
    "grantId()": FunctionFragment;
    "grants(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActiveGrants"
      | "getGrantInfo"
      | "grantId"
      | "grants"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActiveGrants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGrantInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "grantId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActiveGrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrantInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grants", data: BytesLike): Result;

  events: {};
}

export interface IGrantFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGrantFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActiveGrants(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getGrantInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGrantFactory.GrantStructStructOutput]>;

    grantId(overrides?: CallOverrides): Promise<[BigNumber]>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getActiveGrants(overrides?: CallOverrides): Promise<BigNumber[]>;

  getGrantInfo(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGrantFactory.GrantStructStructOutput>;

  grantId(overrides?: CallOverrides): Promise<BigNumber>;

  grants(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getActiveGrants(overrides?: CallOverrides): Promise<BigNumber[]>;

    getGrantInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGrantFactory.GrantStructStructOutput>;

    grantId(overrides?: CallOverrides): Promise<BigNumber>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getActiveGrants(overrides?: CallOverrides): Promise<BigNumber>;

    getGrantInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantId(overrides?: CallOverrides): Promise<BigNumber>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActiveGrants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrantInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
