/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GrantsQuery,
  GrantsQueryInterface,
} from "../../../contracts/GrantsQuery.sol/GrantsQuery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_grantFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAllGrants",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "grantId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "grantAddress",
            type: "address",
          },
        ],
        internalType: "struct GrantsQuery.grantStruct[]",
        name: "allData",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161093d38038061093d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6108ac806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fecfe77114610030575b600080fd5b61003861004e565b6040516100459190610761565b60405180910390f35b60005460408051631e6181c160e31b815290516060926001600160a01b03169163f30c0e08916004808301926020929190829003018186803b15801561009357600080fd5b505afa1580156100a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cb91906106fe565b67ffffffffffffffff8111156100f157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561012a57816020015b6101176105f8565b81526020019060019003908161010f5790505b509050610154604051806040016040528060068152602001651a5b8819d95d60d21b8152506103b6565b60005b81518110156103b2576101926040518060400160405280601081526020016f7374617274206f66206c6f6f7020257360801b815250826103fc565b600080546040516301e3987160e51b81526001600160a01b0390911690633c730e20906101c3908590600401610846565b60806040518083038186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610681565b90506102446040518060400160405280600981526020016863757272496420257360b81b81525082600001516103fc565b6102766040518060400160405280600c81526020016b726563697069656e7420257360a01b8152508260200151610445565b60006102818361048a565b905061028c8161051a565b6040518060c001604052808360000151815260200183602001516001600160a01b0316815260200183604001516001600160a01b031681526020018360600151815260200182815260200160008054906101000a90046001600160a01b03166001600160a01b0316630c0debea866040518263ffffffff1660e01b81526004016103169190610846565b60206040518083038186803b15801561032e57600080fd5b505afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190610660565b6001600160a01b031681525084848151811061039257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806103aa9061084f565b915050610157565b5090565b6103f9816040516024016103ca91906107e7565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610559565b50565b6104418282604051602401610412929190610824565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052610559565b5050565b610441828260405160240161045b9291906107fa565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610559565b60008054604051630606f5f560e11b8152610512916001600160a01b031690630c0debea906104bd908690600401610846565b60206040518083038186803b1580156104d557600080fd5b505afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190610660565b61057a565b90505b919050565b6103f98160405160240161052e9190610846565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b557600080fd5b505afa9250505080156105e5575060408051601f3d908101601f191682019092526105e2918101906106fe565b60015b6105f157506000610515565b9050610515565b6040518060c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b031681525090565b80516001600160a01b038116811461051557600080fd5b600060208284031215610671578081fd5b61067a82610649565b9392505050565b600060808284031215610692578081fd5b6040516080810181811067ffffffffffffffff821117156106c157634e487b7160e01b83526041600452602483fd5b604052825181526106d460208401610649565b60208201526106e560408401610649565b6040820152606083015160608201528091505092915050565b60006020828403121561070f578081fd5b5051919050565b60008151808452815b8181101561073b5760208185018101518683018201520161071f565b8181111561074c5782602083870101525b50601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190868401855b828110156107da57815180518552868101516001600160a01b039081168887015286820151811687870152606080830151908701526080808301519087015260a091820151169085015260c0909301929085019060010161077e565b5091979650505050505050565b60006020825261067a6020830184610716565b60006040825261080d6040830185610716565b905060018060a01b03831660208301529392505050565b6000604082526108376040830185610716565b90508260208301529392505050565b90815260200190565b600060001982141561086f57634e487b7160e01b81526011600452602481fd5b506001019056fea26469706673582212201583566312c5ee8dc111aebf9e47fabdb6a44f93d7ebf672038952c046bb910a64736f6c63430008000033";

type GrantsQueryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GrantsQueryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GrantsQuery__factory extends ContractFactory {
  constructor(...args: GrantsQueryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _grantFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GrantsQuery> {
    return super.deploy(_grantFactory, overrides || {}) as Promise<GrantsQuery>;
  }
  override getDeployTransaction(
    _grantFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_grantFactory, overrides || {});
  }
  override attach(address: string): GrantsQuery {
    return super.attach(address) as GrantsQuery;
  }
  override connect(signer: Signer): GrantsQuery__factory {
    return super.connect(signer) as GrantsQuery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GrantsQueryInterface {
    return new utils.Interface(_abi) as GrantsQueryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GrantsQuery {
    return new Contract(address, _abi, signerOrProvider) as GrantsQuery;
  }
}
