/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Attack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attack__factory>;
    getContractFactory(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarket__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "Grant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Grant__factory>;
    getContractFactory(
      name: "GrantFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GrantFactory__factory>;
    getContractFactory(
      name: "GrantFunder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GrantFunder__factory>;
    getContractFactory(
      name: "GrantsQuery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GrantsQuery__factory>;
    getContractFactory(
      name: "IGrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGrant__factory>;
    getContractFactory(
      name: "IGrantFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGrantFactory__factory>;
    getContractFactory(
      name: "Market",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Market__factory>;
    getContractFactory(
      name: "MarketEdited",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketEdited__factory>;
    getContractFactory(
      name: "MarketTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketTest__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Attack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Attack>;
    getContractAt(
      name: "IMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarket>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "Grant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Grant>;
    getContractAt(
      name: "GrantFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GrantFactory>;
    getContractAt(
      name: "GrantFunder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GrantFunder>;
    getContractAt(
      name: "GrantsQuery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GrantsQuery>;
    getContractAt(
      name: "IGrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGrant>;
    getContractAt(
      name: "IGrantFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGrantFactory>;
    getContractAt(
      name: "Market",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Market>;
    getContractAt(
      name: "MarketEdited",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketEdited>;
    getContractAt(
      name: "MarketTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketTest>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
